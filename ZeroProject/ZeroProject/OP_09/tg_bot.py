import time
import telebot
from telebot import types
from datetime import datetime
from task import Task
import threading
import re

bot = telebot.TeleBot('TOKEN')
tasks_list = [Task('123', '28-05-2025 12:50'), Task('123', '28-05-2025 12:55'), Task('fdsfsdf', '28-05-2025 12:50'), Task('utyutyutyu', '28-05-2025 12:50')]
matches = []

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç! –Ø SmartReminder Bot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ '
                          '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Telegram. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ. '
                          '–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏.')
    tread = threading.Thread(target=send_reminder, args=(message.chat.id,))
    tread.start()
    send_welcome(message)

@bot.message_handler(commands=['start1'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.row(types.KeyboardButton('‚ûïÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É'))
    keyboard.row(types.KeyboardButton('üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'))
    keyboard.row(types.KeyboardButton('‚õî –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'))
    keyboard.row(types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text.startswith('‚ûïÔ∏è'):
        create_task(message)
    elif message.text.startswith('üìã'):
        show_all_tasks(message)
    elif message.text.startswith('‚õî'):
        delete_message(message)
    # elif message.text == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
    #     send_welcome(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.reply_to(message, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')


@bot.message_handler(commands=['new'])
def create_task(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞")
    bot.register_next_step_handler(msg, task_name_step)

@bot.message_handler(commands=['tasks_list'])
def show_all_tasks(message):
    msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å: \n"
    for i in range(len(tasks_list)):
        msg += f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {tasks_list[i].get_name()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {tasks_list[i].get_date()} \r'
    if msg == "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å: \n":
        bot.reply_to(message, '–ù–µ—Ç –∑–∞–¥–∞—á, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å')
    else:
        bot.reply_to(message, msg)

@bot.message_handler(commands=['delete_task'])
def delete_message(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(msg, chek_task)

def task_name_step(message):
    try:
        task_name = message.text

        msg = bot.reply_to(message, '–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ - DD-MM-YYYY hh:mm.\r –ü—Ä–∏–º–µ—Ä - 31-01-1999 09:00')
        bot.register_next_step_handler(msg, task_date_step, task_name)

    except ValueError as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: " + str(e))
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")

def task_date_step(message, task_name):
    try:
        date = message.text
        if not validate_datetime(date):
            bot.reply_to(message, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ')
            bot.register_next_step_handler(message, task_date_step)
        else:
            if is_valid_datetime(date):
                bot.reply_to(message, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {date}')
                created_task = Task(task_name, date)
                tasks_list.append(created_task)
                send_welcome(message)
            else:
                bot.reply_to(message, f'–î–∞—Ç—ã {date} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(message, task_date_step)

    except ValueError as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: " + str(e))
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")
def chek_task(message):
    task = message.text
    for i in range(len(tasks_list)):
        if tasks_list[i].get_name() == task:
            matches.append(i)
    msg = f'–£ —Ç–µ–±—è {len(matches)} –∑–∞–¥–∞—á —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n '
    if len(matches) > 1:
        for i in range(len(matches)):
            msg += f'{i+1}. {tasks_list[matches[i]].get_name()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {tasks_list[matches[i]].get_date()}\n '
        msg += '–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∫–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å?'
        bot.reply_to(message, msg)
        bot.register_next_step_handler(message, delete_task,-1)
    else:
        del tasks_list[matches[0]]
        bot.reply_to(message, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
        matches.clear()
        send_welcome(message)
def delete_task(message, index):
    try:
        i = int(message.text)
        del tasks_list[matches[i-1]]
        bot.reply_to(message, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞: {e}")
    matches.clear()
    send_welcome(message)

def validate_datetime(date_string):
    pattern = re.compile(r'^\d{2}-\d{2}-\d{4} \d{2}:\d{2}$')
    if pattern.match(date_string):
        return True
    return False

def is_valid_datetime(date_string):
    try:
        datetime.strptime(date_string, '%d-%m-%Y %H:%M')
        return True
    except ValueError:
        return False

def send_reminder(chat_id):
    while True:
        now = datetime.now().strftime('%d-%m-%Y %H:%M')
        for i in range(len(tasks_list)):
            if tasks_list[i].get_date() == now:
                bot.send_message(chat_id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {tasks_list[i].get_name()}')
                time.sleep(61)
        time.sleep(1)

bot.polling(none_stop=True)
